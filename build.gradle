plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.22.1'
    //    id 'org.beryx.runtime' version '1.11.3'
}

group = 'notepack'
description 'Privacy oriented, without vendor lock in note organizer desktop application.'

sourceCompatibility = 1.9
targetCompatibility = 1.9
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def getCurrentGitTag() {
    return 'git describe --tags --abbrev=0'.execute().text.substring(1).trim()
}
version = getCurrentGitTag()


repositories {
        
    maven { url "https://repo.maven.apache.org/maven2" }
}

javafx {
    modules = [ 'javafx.controls' , 'javafx.fxml', 'javafx.web']
}

dependencies {
    implementation group: 'org.openjfx', name: 'javafx-base', version:'14'
    implementation group: 'org.openjfx', name: 'javafx-controls', version:'14'
    implementation group: 'org.openjfx', name: 'javafx-fxml', version:'14'
    implementation group: 'org.openjfx', name: 'javafx-web', version:'14'
    implementation group: 'org.json', name: 'json', version:'20190722'
    implementation 'com.vladsch.flexmark:flexmark-all:0.62.2'
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.6.4'
    implementation group: 'org.mnode.ical4j', name: 'ical4j', version: '3.0.21'

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.apache.jackrabbit', name: 'jackrabbit-webdav', version: '2.21.5'

}

configurations {
    all {
        exclude module: 'commons-logging'
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    addExtraDependencies("javafx")
    launcher {
        name = 'Notepack'
        jvmArgs = ['-Xms128m', '-Xmx2g']
    }
    mergedModule {
        additive = true
        uses 'net.fortuna.ical4j.validate.CalendarValidatorFactory'

    }
    jpackage {
        installerOptions += [
                '--description', project.description,
                '--app-version', version,
                '--copyright', 'Ogefest',
                '--license-file', 'LICENSE',
                '--vendor', 'Ogefest'
        ]        
        installerType = project.findProperty('installerType')
        
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'gfx/logo_64.ico']
            installerOptions += [
                '--resource-dir', "build/Notepack-package/Notepack/lib",
                '--win-per-user-install', '--win-dir-chooser',
                '--win-menu', '--win-shortcut'
            ]
        }        
        
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'gfx/logo_256.png']
            installerOptions += [
                '--resource-dir', "build/Notepack-package/Notepack/lib",
                '--linux-menu-group', 'Office',
                '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                '--linux-deb-maintainer', 'hello@notepackapp.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                '--linux-rpm-license-type', 'MPLv2'
            ]
        }

        outputDir = 'Notepack-package'
        imageName = 'Notepack'
        skipInstaller = false
        installerName = 'Notepack'
    }

}

jpackage {
    doFirst {
        project.getProperty('installerType') // throws exception if its missing
    }
}

processResources {
    outputs.upToDateWhen { false }
    doLast {
        def date = new Date()
        def formattedDate = date.format('yyyyMMddHHmmss')
        def resourcesDir = sourceSets.main.output.resourcesDir
        resourcesDir.mkdirs()
        def contents = "name=$project.name\nversion=" + getCurrentGitTag() + "\nbuild=" + formattedDate + "\n"
        println contents
        new File(resourcesDir, "build-info.properties").text = contents
    }
}

mainClassName = 'notepack.Main'
